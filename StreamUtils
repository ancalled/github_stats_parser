
import java.util.HashMap;
import java.util.Map;
import java.util.function.BinaryOperator;

public class StreamUtils {


    @SafeVarargs
    public static final <T> Map<String, Map<String, T>> joinNestedMaps(BinaryOperator<T> combiner,
                                                                       Map<String, Map<String, T>>... maps) {

        Map<String, Map<String, T>> finalMap = new HashMap<>();
        if (maps.length > 0) {
            finalMap.putAll(maps[0]);

            for (int i = 1; i < maps.length; i++) {
                Map<String, Map<String, T>> map = maps[i];

                for (Map.Entry<String, Map<String, T>> e : map.entrySet()) {
                    if (!finalMap.containsKey(e.getKey())) {
                        finalMap.put(e.getKey(), e.getValue());

                    } else {
                        Map<String, T> finalInnerMap = finalMap.get(e.getKey());
                        for (Map.Entry<String, T> ee : e.getValue().entrySet()) {
                            T item = finalInnerMap.get(ee.getKey());
                            T newItem = ee.getValue();
                            if (item == null) {
                                finalInnerMap.put(ee.getKey(), newItem);

                            } else {
                                combiner.apply(item, newItem);
                            }
                        }
                    }
                }
            }
        }
        return finalMap;
    }
}
